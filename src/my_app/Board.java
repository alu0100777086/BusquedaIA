/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my_app;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;
/**
 *
 * @author marcos
 */

public class Board extends JPanel implements ActionListener {

    /**
     * Creates new form NewJPanel
     */
    private final Image [] suelo = new Image [2];
    private final Image [] robot = new Image [2];
    private Timer timer;
    private int size=0;
    private int x=0;
    private int y=0;
    private final int DELAY = 500;
    
    
    public Board() {
        initBoard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initBoard() {
        setLayout(new BorderLayout());
        
        
        loadImage();
        
        timer = new Timer(DELAY, this);
        timer.start();
        //int w = Application.filas*suelo[0].getHeight(this);
        //int h =  Application.columnas*suelo[0].getHeight(this);
       // setPreferredSize(new Dimension(w, h));
    }
    
    private void loadImage() {
        ImageIcon ii = new ImageIcon(getClass().getResource("/my_app/resources/Suelo0.png"));
        suelo[0] = ii.getImage();
        ii = new ImageIcon(getClass().getResource("/my_app/resources/Suelo1.png"));
        suelo[1] = ii.getImage();
        ii = new ImageIcon(getClass().getResource("/my_app/resources/Robot0.png"));
        robot[0] = ii.getImage();
        ii = new ImageIcon(getClass().getResource("/my_app/resources/Robot1.png"));
        robot[1] = ii.getImage();
    }
    
    @Override
    public void paintComponent(Graphics g) {
        if (Application.filas>29 || Application.columnas>29)
            size=1;
        for(int i=0;i<=Application.filas;i++)
            for(int j=0;j<=Application.columnas;j++)
                g.drawImage(suelo[size], i*suelo[size].getHeight(this), j*suelo[size].getHeight(this), null);
        g.drawImage(robot[size], x, Application.columnas*suelo[size].getHeight(this), null);
        Toolkit.getDefaultToolkit().sync();
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        changespeed();
        if(Application.moving){
            x += suelo[size].getHeight(this);
            y += suelo[size].getHeight(this);
            if (x>Application.columnas*suelo[size].getHeight(this)){
                x=0;
                y=0;
            }
            repaint();
        }
    }
    public void changespeed(){
        timer.setDelay(Application.speed);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
