/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my_app;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.Timer;
/**
 *
 * @author marcos
 */

public class Board extends JPanel implements ActionListener {

    /**
     * Creates new form NewJPanel
     */
    private BufferedImage suelo;
    private BufferedImage robot;
    private Timer timer;
    private int x=0;
    private int y=0;
    private final int DELAY = 500;
    private final int alto = 530;
    private final int ancho = 530;
    private boolean up = false;
    private boolean down = true;
    private boolean right = false;
    private boolean left = false;
    
    public Board() {
        initBoard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initBoard() {
        //setLayout(new BorderLayout());
        
        
        try {
            loadImage();
        } catch (URISyntaxException ex) {
            Logger.getLogger(Board.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        timer = new Timer(DELAY, this);
        //timer.start();
        //int w = Application.filas*suelo[0].getHeight(this);
        //int h =  Application.columnas*suelo[0].getHeight(this);
       // setPreferredSize(new Dimension(w, h));
    }
    
    public void loadImage() throws URISyntaxException {
        try {
            suelo = ImageIO.read(new File(getClass().getResource("/my_app/resources/Suelo0.png").toURI()));
            } catch (IOException e) {
        }
        suelo = resize(suelo);
        /*ii = new ImageIcon(getClass().getResource("/my_app/resources/Suelo1.png"));
        suelo[1] = ii.getImage();*/
        try {
            robot = ImageIO.read(new File(getClass().getResource("/my_app/resources/Robot0.png").toURI()));
            } catch (IOException e) {
        }
        robot = resize(robot);
        /*ii = new ImageIcon(getClass().getResource("/my_app/resources/Robot1.png"));
        robot[1] = ii.getImage();*/
    }
    
    @Override
    public void paintComponent(Graphics g) {
        for(int i=0;i<Application.filas;i++)
            for(int j=0;j<Application.columnas;j++)
                g.drawImage(suelo, j*suelo.getWidth(), i*suelo.getHeight(), null);
        g.drawImage(robot, x, y, null);
        Toolkit.getDefaultToolkit().sync();
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
            if (x==0 && y==0){
                up = false;
                right = false;
                left = false;
                down = true;
            }
            if (x==(Application.columnas-1)*suelo.getWidth(this) && y==0){
                up = false;
                left = true;
            }
            if (x==(Application.columnas-1)*suelo.getWidth(this) && y==(Application.filas-1)*suelo.getHeight(this)){
                right = false;
                up = true;
            }
            if (x==0 && y==(Application.filas-1)*suelo.getHeight(this)){
                down = false;
                right = true;
            }
            if (up)
                y -= suelo.getHeight(this);
            if (down)
                y += suelo.getHeight(this);
            if (right)
                x += suelo.getWidth(this);
            if (left)
                x -= suelo.getWidth(this);
            repaint();
    }
    public void changespeed(int speed){
        if (timer.isRunning()){
            timer.stop();
            timer.setDelay(speed);
        }else{
            timer.setDelay(speed);
            timer.start();
        }
        x = 0;
        y = 0;
        repaint();
    }
    
   public BufferedImage resize(BufferedImage im){
        BufferedImage aux = new BufferedImage(ancho/Application.columnas, alto/Application.filas, BufferedImage.TYPE_INT_RGB);

        Graphics g = aux.createGraphics();
        g.drawImage(im, 0, 0, ancho/Application.columnas, alto/Application.filas, null);
        g.dispose();
        return aux;
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
